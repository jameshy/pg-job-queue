#!/usr/bin/env node
'use strict'
require('string-format').extend(String.prototype)
const program = require('commander')
const jobQueue = require('../lib')
const cluster = require('cluster')



program
    .version('0.0.1')
    .option(
        '-f, --handlers-file <path>',
        'set path to handlers file. defaults to ./handlers.js',
        './handlers.js'
    )
    .option(
        '-c, --connection-string <connstring>',
        'postgresql connection string. defaults to postgres://postgres@localhost/pg-job-queue',
        'postgres://postgres@localhost/pg-job-queue'
    )
    .option(
        '-m, --multi-process',
        'spawn a process for each cpu available',
        false
    )

program.parse(process.argv)


if (cluster.isMaster) {
    console.log("loading handlers from '{}'..".format(program.handlersFile))
}

var handlers = require(program.handlersFile)

if (cluster.isMaster && program.multiProcess) {
    const numCPUs = require('os').cpus().length;
    console.log('launching {} workers'.format(numCPUs))
    for (var i =0; i < numCPUs; i++) {
        cluster.fork()
    }
}
else {
    function log(s) {
        if (program.multiProcess) {
            console.log('worker {} - {}'.format(cluster.worker.id, s))
        }
        else {
            console.log(s)
        }
    }
    function gracefulShutdown() {
        log('waiting for jobs to finish before shutdown')
        jobQueue.stopProcessing().then(() => {
            process.exit()
        })
    }

    // when the process is politely killed, do it gracefully (wait for the current job to finish processing)
    process.on('SIGINT', gracefulShutdown)
    process.on('SIGTERM', gracefulShutdown)

    jobQueue.connect(program.connectionString).then(() => {
        jobQueue.setHandlers(handlers)
        log('processing jobs..')
        jobQueue.startProcessing().catch((e) => {
            console.error(e.stack)
        })
    })
}